{new_gh_screen
   post_show
   (panels GAME_PANELS fade)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {game set_paused TRUE}
      {crowd_audio turn_off}
      {do
         ($win_screen)
         {set
            $win_screen
            {if_else
               {meta get won_campaign}
               {if_else
                  {==
                     kDifficultyEasy
                     {game get_difficulty}}
                  win_easy
                  win_game}
               {meta get win_screen}}}
         {{ui screen $win_screen}
            delay_task
            300
            {play_sfx postshow_loop}}
         {ui goto_screen $win_screen}})}
{func
   goto_endgame_complete
   {if_else
      {&&
         {==
            {meta get mode}
            career}
         {meta get won_campaign}}
      {do
         {stop_sfx postshow_loop}
         {meta_loading_goto career}}
      {ui goto_screen complete}}}
#define ADJS
(((adj_c_1 adj_c_2 adj_c_3)
      (adj_b_1 adj_b_2 adj_b_3)
      (adj_a_1 adj_a_2 adj_a_3 adj_a_4)))
#define VERBS
(((verb_c_1 verb_c_2 verb_c_3)
      (verb_b_1 verb_b_2)
      (verb_a_1 verb_a_2 verb_a_3 verb_a_4)))
#define NOUNS
((set show))
{new_gh_panel
   endgame
   (clear_vram TRUE)
   (gen_headline_1
      {do
         (($index
               {-
                  {'player0::player' num_stars}
                  3})
            ($band
               {campaign
                  profile_name
                  {campaign profile_slot}}))
         {headline_format $band $band}
         {sprintf
            "%s %s %s %s %s %s"
            {localize
               {random_elem
                  {elem ADJS $index}}}
            {localize
               {random_elem NOUNS}}
            {localize
               "from"}
            $band
            {localize
               "at"}
            {localize
               {game get_venue}}}})
   (gen_headline_2
      {do
         (($index
               {-
                  {'player0::player' num_stars}
                  3})
            ($band
               {campaign
                  profile_name
                  {campaign profile_slot}}))
         {headline_format $band $band}
         {sprintf
            "%s %s %s %s %s %s"
            $band
            {localize
               {random_elem
                  {elem VERBS $index}}}
            {localize
               {game get_venue}}
            {localize
               "with"}
            {localize
               {random_elem
                  {elem ADJS $index}}}
            {localize
               {random_elem NOUNS}}}})
   (gen_basement_headline
      {localize
         {sprintf
            "headline_basement_star%i"
            {'player0::player' num_stars}}})
   (set_headline
      ($label)
      {$label
         set_localized_text
         {$this
            {if_else
               {==
                  {game get_venue}
                  basement}
               gen_basement_headline
               {random_elem
                  (gen_headline_1 gen_headline_2)}}}})
   (hide_char_pix
      {endgame_win_alterna.mesh set_showing FALSE}
      {endgame_win_classic.mesh set_showing FALSE}
      {endgame_win_punk.mesh set_showing FALSE})
   (enter
      {endgame_song_data.lbl
         set_localized_text
         {game get_song_text}}
      {endgame_diff_data.lbl
         set_text
         {game get_difficulty_sym}}
      {do
         (($player 'player0::player'))
         {endgame_score_data.lbl
            set_localized_text
            {sprint
               {$player score}}}
         {endgame_percent_data.lbl
            set_localized_text
            {sprintf
               {localize eg_percent_format}
               {$player percent_hit}}}
         {endgame_streak_data.lbl
            set_localized_text
            {sprintf
               {localize eg_streak_format}
               {$player longest_streak}}}
         {endgame_review_data.lbl
            set_text
            {$player star_rating}}}
      {$this set_headline endgame_headline.lbl}
      {set
         $new_venue
         ""}
      {set $new_status 0}
      {set $new_cash 0}
      {if
         {==
            career
            {meta get mode}}
         {do
            (($score
                  {'player0::player' score}))
            {campaign finish_song $score $new_venue $new_status}
            {if
               {!=
                  $new_venue
                  ""}
               {meta set continue_screen career}}}})
   (BUTTON_DOWN_MSG
      {if
         {meta is_select_button $button $player_num}
         {synth play_sequence button_select}
         {if_else
            {==
               career
               {meta get mode}}
            {if_else
               $new_status
               {ui goto_screen status}
               {if_else
                  {campaign has_cash_award}
                  {ui goto_screen cashaward}
                  {goto_endgame_complete}}}
            {ui goto_screen highscore}}}
      kDataUnhandled)}
{new_gh_screen
   endgame
   (panels GAME_PANELS endgame helpbar)
   (focus endgame)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (helpbar
      (default
         ((fret1 help_continue))))}
{new_panel win_easy}
{new_gh_screen
   win_easy
   (panels GAME_PANELS win_easy helpbar)
   (focus win_easy)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (helpbar
      (default
         ()))
   (enter
      {$this
         set
         continue_frame
         {'+'
            {ui frame}
            6000}}
      {play_sfx beat_easy}
      {play_sfx crowd_win}
      {we_bandname.lbl
         set_localized_text
         {campaign
            profile_name
            {campaign profile_slot}}})
   (can_continue
      {>
         {ui frame}
         {$this get continue_frame}})
   (poll
      {if
         {$this can_continue}
         {helpbar
            set_display
            ((fret1 help_continue))}})
   (BUTTON_DOWN_MSG
      {if
         {&&
            {$this can_continue}
            {meta is_select_button $button $player_num}}
         {synth play_sequence button_select}
         {ui goto_screen endgame}})}
#define WIN_GAME_FADE_TO_BLACK_MS
(1000)
#define WIN_GAME_FADE_TO_WHITE_MS
(1000)
#define WIN_GAME_FADE_IN_SCREEN_MS
(4000)
#define WIN_GAME_INPUT_DELAY_MS
(6000)
{new_guitar_display_panel
   endgame_guitar_display
   (object_name endgame_guitar_display)
   (rnd_file ghui/guitar_display.gh)
   (rnd_name guitar_display)
   (config endgame)}
{new_panel win_game}
{new_gh_screen
   win_game
   (panels GAME_PANELS win_game endgame_guitar_display helpbar fade)
   (focus win_game)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (helpbar
      (default
         ()))
   (enter
      {fade
         start_fade
         WIN_GAME_FADE_IN_SCREEN_MS
         (color 1 1 1)
         (fade_synth FALSE)
         (fade_out FALSE)}
      {$this
         set
         continue_frame
         {'+'
            {ui frame}
            WIN_GAME_INPUT_DELAY_MS}}
      {endgame_guitar_display hide TRUE}
      {win_screen1.view set_showing TRUE}
      {win_screen2.view set_showing FALSE}
      {wg_diff.lbl
         set_localized_text
         {sprintf
            {localize win_diff}
            {localize
               {game get_difficulty_sym}}}}
      {play_sfx beat_other}
      {play_sfx crowd_win}
      {$this set battleaxe_display FALSE})
   (can_continue
      {>
         {ui frame}
         {$this get continue_frame}})
   (poll
      {if
         {$this can_continue}
         {helpbar
            set_display
            ((fret1 help_continue))}})
   (leave_screen
      {fade
         start_fade
         WIN_GAME_FADE_TO_BLACK_MS
         (color 0 0 0)
         (fade_synth FALSE)
         (fade_out TRUE)}
      {synth play_sequence button_select}
      {$this
         delay_task
         WIN_GAME_FADE_TO_BLACK_MS
         {ui goto_screen endgame}})
   (display_battleaxe
      {campaign unlock_global_item battleaxe}
      {$this set battleaxe_display TRUE}
      {$this
         set
         continue_frame
         {'+'
            {ui frame}
            WIN_GAME_INPUT_DELAY_MS}}
      {fade
         start_fade
         WIN_GAME_FADE_TO_WHITE_MS
         (color 1 1 1)
         (fade_synth FALSE)
         (fade_out TRUE)}
      {$this
         delay_task
         WIN_GAME_FADE_TO_WHITE_MS
         {'ui::win_screen1.view' set_showing FALSE}
         {'ui::win_screen2.view' set_showing TRUE}
         {endgame_guitar_display hide FALSE}
         {endgame_guitar_display show_guitar 0 battleaxe ''}
         {fade
            start_fade
            WIN_GAME_FADE_IN_SCREEN_MS
            (color 1 1 1)
            (fade_synth FALSE)
            (fade_out FALSE)}})
   (BUTTON_DOWN_MSG
      {if
         {&&
            {$this can_continue}
            {meta is_select_button $button $player_num}}
         {if_else
            {&&
               {==
                  kDifficultyExpert
                  {game get_difficulty}}
               {!
                  {$this get battleaxe_display}}}
            {$this display_battleaxe}
            {$this leave_screen}}})}
{new_status_panel
   status
   (rnd_file
      {sprint
         "ghui/status_"
         {campaign status}
         ".gh"})
   (retain_last_focus FALSE)
   (enter
      {if
         {&&
            {meta get won_campaign}
            {==
               5
               {campaign status}}
            {==
               kDifficultyEasy
               {game get_difficulty}}}
         {status_guitarhero_newvenue.view set_showing FALSE}})
   (text
      (status1
         (band
            (label
               "status_rocker_headline1.lbl")
            (token status_rocker_week)))
      (status2
         (band
            (label
               "status_young_bandname.lbl")
            (token status_young_gun_interview)))
      (status3
         (band
            (label
               "status_shredder_headline2.lbl")
            (token status_shredder_changing)))
      (status4
         (band
            (label
               "status_pro_headline1.lbl")
            (token status_pro_goes))
         (band
            (label
               "status_pro_headline2.lbl")
            (token status_pro_piece)))
      (status5
         (band
            (label
               "status_guitarhero_venue1.lbl")
            (token status_guitarhero_crash))
         (char
            (label
               "status_guitarhero_headline1.lbl"))
         (char
            (label
               "status_guitarhero_headline5.lbl")))
      (status6
         (char
            (label
               "status_guitarlegend_charname.lbl")))
      (status7
         (char
            (label
               "status_guitargod_headline3.lbl"))
         (char
            (label
               "status_guitargod_status2.lbl"))
         (char
            (label
               "status_guitargod_headline2.lbl"))
         (band
            (label
               "status_guitargod_headline5.lbl")
            (token status_god_depart))
         (band
            (label
               "status_guitargod_headline7.lbl")
            (token status_god_drummer))))}
{new_gh_screen
   status
   (panels GAME_PANELS status helpbar)
   (focus status)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (helpbar
      (default
         ((fret1 help_continue))))
   (enter
      {play_sfx beat_venue})
   (BUTTON_DOWN_MSG
      {if
         {meta is_select_button $button $player_num}
         {synth play_sequence button_select}
         {cond
            ({campaign has_cash_award}
               {ui goto_screen cashaward})
            (TRUE
               {goto_endgame_complete})}})}
{new_panel cashaward}
{new_gh_screen
   cashaward
   (panels GAME_PANELS cashaward helpbar)
   (focus cashaward)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (force_exit TRUE)
   (helpbar
      (default
         ((fret1 help_continue))))
   (enter
      {ca_bandname.lbl
         set_localized_text
         {campaign
            profile_name
            {campaign profile_slot}}}
      {$this show_next_award}
      {animate_forever_30fps $this cashaward.view})
   (show_next_award
      {play_sfx cash_award}
      {do
         (($amount 0)
            ($reason 0)
            $gross)
         {campaign next_cash_award $amount $reason}
         {ca_reason.lbl set_text $reason}
         {ca_amount.lbl
            set_localized_text
            {sprintf
               "$%d"
               $amount}}
         {set
            $gross
            {int
               {/ $amount 5.0e-2}}}
         {ca_grossnum.lbl
            set_localized_text
            {sprintf
               "$%d"
               $gross}}
         {$this show_fee ca_num1.lbl $gross 0.26}
         {$this show_fee ca_num2.lbl $gross 0.21}
         {$this show_fee ca_num3.lbl $gross 9.0e-2}
         {$this show_fee ca_num4.lbl $gross 0.12}
         {$this show_fee ca_num5.lbl $gross 0.15}
         {$this show_fee ca_num6.lbl $gross 4.0e-2}
         {$this show_fee ca_num7.lbl $gross 8.0e-2}})
   (show_fee
      ($lbl $gross $pct)
      {do
         (($fee
               {int
                  {'*' $pct $gross}}))
         {$lbl
            set_localized_text
            {sprintf
               "-$%d"
               $fee}}})
   (BUTTON_DOWN_MSG
      {if
         {meta is_select_button $button $player_num}
         {synth play_sequence button_select}
         {if_else
            {campaign has_cash_award}
            {$this show_next_award}
            {goto_endgame_complete}}})}
{new_panel highscore}
{new_gh_screen
   highscore
   (panels GAME_PANELS highscore helpbar)
   (focus highscore)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {hs_stats.lbl
         set_localized_text
         {sprintf
            {localize highscore_score_fmt}
            {game get_song_text}
            {localize
               {game get_difficulty_sym}}}}
      {do
         (($score
               {'player0::player' score})
            ($index
               {'+'
                  {highscores check_highscore $score}
                  1}))
         {$this fill_scores $index $score}
         {if_else
            {== $index 0}
            {$this view_scores}
            {$this enter_score $index}}}
      {$this set flushed FALSE}
      {$this update_help_bar})
   (fill_scores
      ($new_index $new_score)
      {do
         (($slot 0))
         {foreach_int
            $i
            1
            6
            {do
               (($name 0)
                  ($score 0))
               {if_else
                  {== $i $new_index}
                  {$this
                     set_entry
                     $i
                     ""
                     $new_score}
                  {do
                     {highscores get_highscore $slot $name $score}
                     {$this set_entry $i $name $score}
                     {'++' $slot}}}}}})
   (set_entry
      ($index $name $score)
      {do
         (($name_lbl
               {sprintf
                  "hs_name%d.lbl"
                  $index})
            ($score_lbl
               {sprintf
                  "hs_score%d.lbl"
                  $index}))
         {$name_lbl set_localized_text $name}
         {$score_lbl
            set_text
            {sprintf
               "%d"
               $score}}})
   (get_text_entry
      ($index)
      {sprintf
         "hs_entry%d.ten"
         $index})
   (get_name_label
      ($index)
      {sprintf
         "hs_name%d.lbl"
         $index})
   (enter_score
      ($index)
      {do
         (($ten
               {$this get_text_entry $index}))
         {$this set active_ten $ten}
         {$this set_focus $ten}
         {hs_flush.tnm set_frame 0}
         {$this set_text_entry $index}})
   (view_scores
      {$this set active_ten 0}
      {$this set_text_entry -1}
      {hs_start.lbl set_showing FALSE})
   (set_text_entry
      ($index)
      {foreach_int
         $i
         1
         6
         {{$this get_text_entry $i}
            set_showing
            {== $i $index}}
         {{$this get_name_label $i}
            set_showing
            {!= $i $index}}})
   (poll
      {if
         {&&
            {$this get active_ten}
            {{$this get active_ten}
               is_done}
            {!
               {$this get flushed}}}
         {$this set flushed TRUE}
         {$this anim_task hs_flush.tnm 1000 0 17}
         {play_sfx flush}
         {$this update_help_bar}
         {$this
            delay_task
            7000
            {goto_endgame_complete}}})
   (update_help_bar
      {do
         (($ten
               {$this get active_ten}))
         {helpbar
            set_display
            {if_else
               {&&
                  $ten
                  {!
                     {$ten is_done}}}
               {get_text_entry_help_text
                  ()
                  $ten
                  FALSE}
               {if_else
                  {$this get flushed}
                  ()
                  ((fret1 help_continue))}}}})
   (SELECT_MSG
      {$this update_help_bar}
      kDataUnhandled)
   (SCREEN_BACK_MSG
      {$this update_help_bar}
      kDataUnhandled)
   (TEXT_ENTRY_MSG
      {do
         (($name
               {{$this get active_ten}
                  get_text}))
         {highscores
            add
            $name
            {'player0::player' score}}}
      kDataUnhandled)
   (BUTTON_DOWN_MSG
      {if
         {meta is_select_button $button $player_num}
         {do
            (($ten
                  {$this get active_ten}))
            {if
               {'||'
                  {! $ten}
                  {$ten is_done}}
               {synth play_sequence button_select}
               {goto_endgame_complete}}}}
      kDataUnhandled)}
{new_gh_panel
   complete
   (clear_vram TRUE)
   (navigator
      (vertical comp_selsong.btn comp_restart.btn comp_quit.btn))
   (enter
      {$this set_focus comp_selsong.btn}
      {if
         {&&
            {==
               career
               {meta get mode}}
            {!
               {campaign
                  is_store_song
                  {game get_song}}}}
         {comp_selsong.btn set_text CONTINUE}})
   (SELECT_MSG
      {switch
         $component
         (comp_restart.btn
            {game restart}
            {ui goto_screen game})
         (comp_selsong.btn
            {meta_loading_goto
               {meta get continue_screen}})
         (comp_quit.btn
            {meta_loading_goto
               {meta get main_screen}})}
      {stop_sfx postshow_loop}
      {if
         {==
            career
            {meta get mode}}
         {meta setup_career}})}
{new_gh_screen
   complete
   (panels GAME_PANELS complete helpbar)
   (focus complete)
   (in_game TRUE)
   (allow_back FALSE)
   (animate_transition FALSE)
   (helpbar
      (default
         ((fret1 help_continue)
            (strum help_updown))))}