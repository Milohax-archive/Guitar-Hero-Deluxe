{set
   $camera.groups
   ((flr_near_lft
         $camedit.flr_near_lft
         {'|' kCamNoSolo kCamNear kCamLeft})
      (flr_near_rt
         $camedit.flr_near_rt
         {'|' kCamNoSolo kCamNear kCamRight})
      (flr_far_lft
         $camedit.flr_far_lft
         {'|' kCamNoSolo kCamFar kCamLeft})
      (flr_far_rt
         $camedit.flr_far_rt
         {'|' kCamNoSolo kCamFar kCamRight})
      (band_POV
         $camedit.band_POV
         {'|' kCamNoSolo kCamBehind})
      (balcony_lft
         $camedit.balcony_lft
         {'|' kCamNoSolo kCamFar kCamLeft})
      (balcony_rt
         $camedit.balcony_rt
         {'|' kCamNoSolo kCamFar kCamRight})
      (SOLO_NEAR
         $camedit.SOLO_NEAR
         {'|' kCamSolo kCamCloseup})
      (SOLO_FAR
         $camedit.SOLO_FAR
         {'|' kCamSolo kCamNear})
      (LOSE
         $camedit.LOSE
         {'|' kCamSpecial})
      (WIN
         $camedit.WIN
         {'|' kCamSpecial})
      (INTRO
         $camedit.INTRO
         {'|' kCamSpecial}))}
{set
   $camera.pools
   ((flr_near
         0.5
         (flr_near_lft flr_near_rt))
      (flr_far
         0.5
         (flr_far_lft flr_far_rt))
      (band
         0.2
         (band_POV))
      (balcony
         0.3
         (balcony_lft balcony_rt))
      (solo
         1.0
         (SOLO_NEAR SOLO_FAR)))}
#define WIN_CAMERA_DELAY
(1750)
{set $camera.DEBUG FALSE}
{set
   $camera.reason
   ""}
{func
   setup_groups
   {foreach
      $group
      $camera.groups
      {cam make_group $group}}}
{func
   setup_pools
   {do
      (($i 0))
      {while
         {<
            $i
            {size $camera.pools}}
         {cam
            add_pool
            {elem $camera.pools $i}}
         {'+=' $i 1}}}}
{func
   eval_shot
   ($shot)
   {if
      {cam get_enabled}
      {eval $shot}
      {set $camera.shot $shot}
      {rnd
         reflect
         camera
         {print
            "Shot: "
            {arena cam_msg}
            " "
            "Duration: "
            $camera.bars_left
            "\n"}}
      {if
         $camera.DEBUG
         {print
            "New shot, "
            $camera.reason
            ": "
            {arena cam_msg}
            "\n"}
         {set
            $camera.reason
            ""}}}}
{func
   pick_regular_shot
   {cam change_to_regular_shot}
   {update_crowd}}
{func
   pick_solo_shot
   {cam change_to_solo_shot}
   {update_crowd}}
{func
   pick_shot
   {if
      {! $camera.stare_at_singer}
      {if_else
         $camera.solo
         {pick_solo_shot}
         {pick_regular_shot}}}}
{func
   get_shot_duration
   {do
      (($durations
            {find
               {arena venue_data}
               camera_durations
               $arena.excitement}))
      {random_int
         {elem $durations 1}
         {elem $durations 2}}}}
{func
   check_shot
   {if
      {<= $camera.bars_left 0}
      {set
         $camera.bars_left
         {get_shot_duration}}
      {set
         $camera.reason
         "timeout"}
      {pick_shot}}}
{func
   force_pick_shot
   {set $camera.bars_left 10}
   {pick_shot}}
{func
   reset_camera
   {set $camera.beat 0}
   {set $camera.solo FALSE}
   {set $camera.pool_index -1}
   {set $camera.about_to_switch FALSE}
   {set $camera.shot NULL}
   {set $camera.solo_dist NULL}
   {if
      $camera.stare_at_singer
      {eval_shot
         {random_elem $camedit.SINGER}}}}
{func
   toggle_camera_lipsync
   {set
      $camera.stare_at_singer
      {! $camera.stare_at_singer}}
   {if
      $camera.stare_at_singer
      {eval_shot
         {random_elem $camedit.SINGER}}}}
{arena
   add_handlers
   (init
      {if
         {!
            {cam inited}}
         {setup_groups}
         {setup_pools}}
      {arena set_fade 0}
      {cam reset})
   (intro_start
      {reset_camera}
      {if
         {! $camera.stare_at_singer}
         {set
            $camera.reason
            "intro"}
         {set $camera.bars_left 6}
         {eval_shot
            {elem $camedit.INTRO 0}}})
   (intro_skip
      {reset_camera}
      {set $camera.bars_left 0}
      {check_shot})
   (terminate
      {delete setup_groups}
      {delete setup_pools}
      {delete eval_shot}
      {delete pick_regular_shot}
      {delete pick_solo_shot}
      {delete pick_shot}
      {delete get_shot_duration}
      {delete check_shot}
      {delete force_pick_shot}
      {delete reset_camera}
      {set $camera.groups 0}
      {set $camera.pools 0}
      {set $camedit.flr_near_lft 0}
      {set $camedit.flr_near_rt 0}
      {set $camedit.flr_far_lft 0}
      {set $camedit.flr_far_rt 0}
      {set $camedit.balcony_lft 0}
      {set $camedit.balcony_rt 0}
      {set $camedit.guitar_god 0}
      {set $camedit.band_POV 0}
      {set $camedit.SOLO 0}
      {set $camedit.SOLO_NEAR 0}
      {set $camedit.SOLO_FAR 0}
      {set $camedit.LOSE 0}
      {set $camedit.INTRO 0}
      {set $camedit.WIN 0}
      {set $camedit.SINGER 0})
   (beat
      {set $camera.beat $beat}
      {cam beat_check}
      {if
         {&&
            $camera.about_to_switch
            {<= $beats_left 1}}
         {set $camera.about_to_switch FALSE}
         {set
            $camera.bars_left
            {get_shot_duration}}
         {set
            $camera.reason
            "excitement change"}
         {pick_shot}})
   (downbeat
      {if
         $camera.bars_left
         {-- $camera.bars_left 1}}
      {if
         {!
            {'player0::player' in_star_mode}}
         {check_shot}})
   (excitement
      {set $camera.about_to_switch TRUE})
   (game_over
      {set $camera.bars_left 100}
      {set
         $camera.reason
         "game over"}
      {if_else
         {char_sys final_win_sequence}
         {if_else
            {==
               {game get_character}
               "grim"}
            {eval_shot
               {random_elem $camedit.FINAL_WIN_GRIM}}
            {eval_shot
               {random_elem $camedit.FINAL_WIN}}}
         {if_else
            $arena.game_won
            {game
               delay_task
               WIN_CAMERA_DELAY
               {eval_shot
                  {random_elem $camedit.WIN}}}
            {eval_shot
               {random_elem $camedit.LOSE}}}})
   (one_bar_to
      {if
         {> $camera.beat 0}
         {set
            $camera.solo
            {switch
               $upcoming_section
               ((solo)
                  TRUE)
               ((verse chorus)
                  FALSE)}}
         {set
            $camera.bars_left
            {get_shot_duration}}
         {set
            $camera.reason
            "one bar before section"}
         {pick_regular_shot}})}