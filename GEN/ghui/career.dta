{func
   is_updown_button
   ($button)
   {'||'
      {== $button kPad_DDown}
      {== $button kPad_DUp}}}
#define VENUE_MAP_SCROLL_MS
(250)
{new_charsys_panel
   char_single
   (char_config singleplayer)
   (load_order metal classic alterna hair_metal punk nu_metal hiphop grim)
   (enter
      {$this hide TRUE}
      {$this
         show_char
         0
         {game get_character}})}
#define SEL_DIFFICULTY_COMMON
((navigator
      (vertical sd_diff1.btn sd_diff2.btn sd_diff3.btn sd_diff4.btn))
   (update_focus
      {$this
         set_focus
         {switch
            {$this last_difficulty}
            (kDifficultyEasy sd_diff1.btn)
            (kDifficultyMedium sd_diff2.btn)
            (kDifficultyHard sd_diff3.btn)
            (kDifficultyExpert sd_diff4.btn)}})
   (set_difficulty
      ($component)
      {game
         set_difficulty
         {switch
            $component
            (sd_diff1.btn kDifficultyEasy)
            (sd_diff2.btn kDifficultyMedium)
            (sd_diff3.btn kDifficultyHard)
            (sd_diff4.btn kDifficultyExpert)}}
      {$this update_difficulty})
   (SELECT_MSG
      {$this set_difficulty $component}
      kDataUnhandled))
{new_panel
   sel_difficulty
   SEL_DIFFICULTY_COMMON
   (enter
      {$this update_focus})
   (last_difficulty
      {game get_difficulty})
   (update_difficulty)}
{new_panel
   sel_diff_career
   SEL_DIFFICULTY_COMMON
   (enter
      {sd_easy_status.lbl
         set_localized_text
         {campaign get_status_progress kDifficultyEasy}}
      {sd_med_status.lbl
         set_localized_text
         {campaign get_status_progress kDifficultyMedium}}
      {sd_hard_status.lbl
         set_localized_text
         {campaign get_status_progress kDifficultyHard}}
      {sd_expert_status.lbl
         set_localized_text
         {campaign get_status_progress kDifficultyExpert}}
      {$this update_focus})
   (last_difficulty
      {campaign last_difficulty})
   (update_difficulty
      {campaign update_difficulty})}
{new_gh_screen
   sel_difficulty
   (panels meta sel_diff_career helpbar char_single)
   (focus sel_diff_career)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (SELECT_MSG
      {{ui panel sel_diff_career}
         set_difficulty
         $component}
      {if_else
         {campaign new_campaign}
         {ui goto_screen sel_character_new}
         {do
            {campaign get_character_info}
            {ui goto_screen career}}}
      kDataUnhandled)}
{new_gh_panel
   career
   (navigator
      (vertical cm_letsrock.btn cm_hero.btn cm_guitar.btn cm_store.btn))
   (focus cm_letsrock.btn)
   (enter
      {cm_char.lbl
         set_text
         {game get_character}}
      {cm_guitar.lbl
         set_text
         {game get_guitar_skin}}
      {cm_cash.lbl
         set_localized_text
         {sprintf
            {localize career_cash_format}
            {campaign cash}}}
      {cm_band.lbl
         set_localized_text
         {campaign
            profile_name
            {campaign profile_slot}}}
      {cm_score.lbl
         set_localized_text
         {sprintf
            {localize career_score_format}
            {campaign career_score}}}
      {cm_status.lbl
         set_text
         {campaign get_cur_status_sym}}
      {cm_career.lbl
         set_text
         {game get_difficulty_sym}}
      {if
         {==
            kDifficultyEasy
            {game get_difficulty}}
         {$this disable_component cm_store.btn}}
      {cm_cash.lbl
         set_showing
         {!=
            kDifficultyEasy
            {game get_difficulty}}}
      {cm_cash_title.lbl
         set_showing
         {!=
            kDifficultyEasy
            {game get_difficulty}}})
   (SELECT_MSG
      {switch
         $component
         (cm_letsrock.btn
            {autosave_goto sel_venue})
         (cm_hero.btn
            {ui goto_screen sel_character_edit})
         (cm_guitar.btn
            {ui goto_screen sel_guitar_edit})
         (cm_store.btn
            {ui goto_screen store})})}
{new_gh_screen
   career
   (panels meta career helpbar char_single)
   (focus career)
   (allow_back FALSE)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (enter
      {turn_off_ambient}
      {meta setup_career})
   (BUTTON_DOWN_MSG
      {if
         {meta is_back_button $button $player_num}
         {$this backwards_anim}
         {synth play_sequence button_back}
         {ui goto_screen sel_difficulty}}
      kDataUnhandled)}
{new_gh_panel
   sel_character
   (object_name sel_character)
   (navigator
      (vertical sc_char_metal.pic sc_char_classic.pic sc_char_alterna.pic sc_char_hair_metal.pic sc_char_punk.pic sc_char_nu_metal.pic sc_char_hiphop.pic sc_char_grim.pic))
   (focus sc_char_metal.pic)
   (enter
      {animate_forever_30fps $this sel_character.view}
      {do
         (($character
               {game get_character}))
         {{ui panel char_single}
            show_char
            0
            $character}
         {sc_char_nm.lbl set_text $character}
         {sc_char_blurb.lbl
            set_localized_text
            {localize
               {sprint
                  $character
                  "_blurb"}}}
         {$this set char_focus $character}
         {$this
            set_focus
            {sprint
               "sc_char_"
               $character
               ".pic"}}}
      {$this init_pic_state sc_char_metal.pic}
      {$this init_pic_state sc_char_classic.pic}
      {$this init_pic_state sc_char_alterna.pic}
      {$this init_pic_state sc_char_hair_metal.pic}
      {$this init_pic_state sc_char_punk.pic}
      {$this init_pic_state sc_char_nu_metal.pic}
      {$this init_pic_state sc_char_hiphop.pic}
      {$this init_pic_state sc_char_grim.pic}
      {app set_compact_heap TRUE})
   (exit
      {app set_compact_heap FALSE})
   (sel_char_highlight_off
      {sc_char_alterna_focus.view set_showing FALSE}
      {sc_char_classic_focus.view set_showing FALSE}
      {sc_char_hair_metal_focus.view set_showing FALSE}
      {sc_char_hiphop_focus.view set_showing FALSE}
      {sc_char_metal_focus.view set_showing FALSE}
      {sc_char_nu_metal_focus.view set_showing FALSE}
      {sc_char_punk_focus.view set_showing FALSE}
      {sc_char_grim_focus.view set_showing FALSE})
   (FOCUS_MSG
      {$this
         set
         char_focus
         {$this char_name $new_focus}}
      {if
         {$this get char_focus}
         {$this sel_char_highlight_off}
         {{sprint
               "sc_char_"
               {$this get char_focus}
               "_focus.view"}
            set_showing
            TRUE}
         {sc_char_nm.lbl
            set_text
            {$this get char_focus}}
         {sc_char_blurb.lbl
            set_localized_text
            {localize
               {sprint
                  {$this get char_focus}
                  "_blurb"}}}
         {{ui panel char_single}
            show_char
            0
            {$this get char_focus}}}
      kDataUnhandled)
   (init_pic_state
      ($pic)
      {if
         {!
            {campaign
               is_unlocked
               {$this char_name $pic}}}
         {$this disable_component $pic}}
      TRUE)
   (char_name
      ($pic)
      {switch
         $pic
         (sc_char_metal.pic metal)
         (sc_char_classic.pic classic)
         (sc_char_alterna.pic alterna)
         (sc_char_hiphop.pic hiphop)
         (sc_char_punk.pic punk)
         (sc_char_nu_metal.pic nu_metal)
         (sc_char_hair_metal.pic hair_metal)
         (sc_char_grim.pic grim)
         0})}
{new_panel
   sel_character_loading
   (poll
      {scl_loading.lbl
         set_showing
         {!
            {{ui panel char_single}
               are_chars_loaded}}})}
#define SEL_CHARACTER_COMMON
((panels meta sel_character char_single sel_character_loading helpbar)
   (focus sel_character)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (TRANSITION_COMPLETE_MSG
      {{ui panel char_single}
         hide
         FALSE})
   (exit
      {{ui panel char_single}
         hide
         TRUE}))
{new_gh_screen
   sel_character_new
   SEL_CHARACTER_COMMON
   (BUTTON_DOWN_MSG
      {if
         {meta is_select_button $button $player_num}
         {synth play_sequence button_select}
         {do
            (($sel_char
                  {sel_character get char_focus}))
            {if
               {&&
                  $sel_char
                  {!=
                     {game get_character}
                     $sel_char}}
               {game set_character $sel_char}}}
         {ui goto_screen sel_guitar}}
      kDataUnhandled)}
{new_gh_screen
   sel_character_edit
   SEL_CHARACTER_COMMON
   (BUTTON_DOWN_MSG
      {if
         {meta is_select_button $button $player_num}
         {synth play_sequence button_select}
         {do
            (($sel_char
                  {sel_character get char_focus}))
            {if
               {&&
                  $sel_char
                  {!=
                     {game get_character}
                     $sel_char}}
               {game set_character $sel_char}}}
         {campaign set_character_info}
         {ui goto_screen career}}
      {if
         {meta is_back_button $button $player_num}
         {$this backwards_anim}
         {synth play_sequence button_back}
         {ui goto_screen career}}
      kDataUnhandled)}
{new_panel sel_guitar}
{new_guitar_display_panel
   guitar_display
   (object_name guitar_display)
   (force_exit TRUE)}
{new_guitar_select_panel
   input_guitar
   (object_name input_guitar)
   (rnd_file
      "")}
#define SKIN_ANIM_START
(0)
#define SKIN_ANIM_END
(12)
#define SKIN_ANIM_PERIOD
(250)
#define SEL_GUITAR_COMMON
((panels meta sel_guitar guitar_display input_guitar helpbar char_single)
   (focus input_guitar)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (enter
      {sg_selectyourguitar.lbl set_text select_guitar}
      {input_guitar set_quickplay 0 FALSE}
      {input_guitar set_skin_select 0 FALSE}
      {$this update_display}
      {guitar_transition.tnm set_frame SKIN_ANIM_START}
      {{ui panel char_single}
         set_paused
         TRUE})
   (exit
      {{ui panel char_single}
         set_paused
         FALSE})
   (SCROLL_MSG
      {$this update_display}
      kDataUnhandled)
   (GH_SELECT_MSG
      {synth play_sequence button_select}
      {if_else
         {input_guitar is_skin_select 0}
         {$this goto_career}
         {do
            (($guitar
                  {input_guitar get_selected_guitar 0}))
            {if_else
               {>
                  {input_guitar get_num_skins $player_num $guitar}
                  1}
               {do
                  {sg_selectyourguitar.lbl set_text select_skin}
                  {input_guitar set_skin_select 0 TRUE}
                  {$this skin_zoom SKIN_ANIM_START SKIN_ANIM_END}
                  {$this update_display}}
               {$this goto_career}}}}
      kDataUnhandled)
   (goto_career
      {game
         set_guitar
         {input_guitar get_selected_guitar 0}}
      {game
         set_guitar_skin
         {input_guitar get_selected_skin 0}}
      {campaign set_character_info}
      {ui goto_screen career})
   (skin_zoom
      ($start $end)
      {$this set_animating 0 TRUE}
      {$this anim_task guitar_transition.tnm SKIN_ANIM_PERIOD $start $end}
      {$this
         delay_task
         SKIN_ANIM_PERIOD
         (preserve $this)
         {$this set_animating 0 FALSE}})
   (deselect_skin
      {synth play_sequence button_back}
      {sg_selectyourguitar.lbl set_text select_guitar}
      {input_guitar set_skin_select 0 FALSE}
      {$this skin_zoom SKIN_ANIM_END SKIN_ANIM_START}
      {$this update_display})
   (update_display
      {do
         (($guitar
               {input_guitar get_selected_guitar 0})
            ($skin
               {input_guitar get_selected_skin 0}))
         {if_else
            {input_guitar is_skin_select 0}
            {do
               {sg_guitar_nm.lbl set_text $skin}
               {sg_guitar_desc.lbl
                  set_text
                  {game get_guitar_skin_desc $skin}}}
            {do
               {sg_guitar_nm.lbl set_text $guitar}
               {sg_guitar_desc.lbl
                  set_text
                  {game get_guitar_desc $guitar}}}}
         {guitar_display show_guitar 0 $guitar $skin}})
   (BUTTON_DOWN_MSG
      {if_else
         {$this animating 0}
         TRUE
         {if_else
            {meta is_back_button $button $player_num}
            {if_else
               {input_guitar is_skin_select 0}
               {$this deselect_skin}
               {if_else
                  {$this auto_back}
                  kDataUnhandled
                  {$this go_back}}}
            kDataUnhandled}}))
{new_gh_screen
   sel_guitar
   SEL_GUITAR_COMMON
   (auto_back TRUE)}
{new_gh_screen
   sel_guitar_edit
   SEL_GUITAR_COMMON
   (auto_back FALSE)
   (go_back
      {$this backwards_anim}
      {synth play_sequence button_back}
      {campaign set_character_info}
      {ui goto_screen career})}
{new_charsys_panel
   char_store
   (char_config store)
   (load_order hair_metal grim)}
{new_guitar_display_panel
   store_guitar_display
   (object_name store_guitar_display)
   (rnd_file ghui/guitar_display.gh)
   (rnd_name guitar_display)
   (config store)}
{new_panel store_cd}
{new_panel store_video}
{new_panel store_back}
{new_store_panel
   store
   (object_name store)
   (navigator
      (vertical st_guitars.btn st_skins.btn st_songs.btn st_characters.btn st_videos.btn))
   (focus st_guitars.btn)
   (retain_last_focus FALSE)
   (set_store_mode
      ($b)
      {song_provider set_store_mode $b}
      {character_provider set_store_mode $b})
   (show_store_screen_1
      {st_screen1.view set_showing TRUE}
      {st_screen2.view set_showing FALSE})
   (show_store_screen_2
      {st_screen1.view set_showing FALSE}
      {st_screen2.view set_showing TRUE}
      {$this set itemIdx 0})
   (get_item_price
      {$this
         price
         {$this get category}
         {$this get_item_name}})
   (get_item_name
      {$store_item_provider
         get_symbol
         {$this get itemIdx}})
   (update_store_item_desc
      {st_item_name.lbl
         set_text
         {$store_item_provider
            get_text
            {$this get itemIdx}}}
      {st_item_desc.lbl
         set_text
         {sprintf
            "%s_shop_desc"
            {$this get_item_name}}}
      {st_cost.lbl
         set_localized_text
         {sprintf
            "$%d"
            {$this get_item_price}}})
   (update_store_item_display
      {switch
         {$this get category}
         (character
            {{ui panel char_store}
               show_char
               0
               {character_provider
                  get_symbol
                  {$this get itemIdx}}})
         (guitar
            {store_guitar_display
               show_guitar
               0
               {store_guitar_provider
                  get_symbol
                  {$this get itemIdx}}
               ''})
         (skin
            {store_guitar_display
               show_guitar
               0
               {store_skin_provider
                  get_guitar
                  {$this get itemIdx}}
               {store_skin_provider
                  get_symbol
                  {$this get itemIdx}}})
         (song
            {song_preview
               {$this get_item_name}})}
      TRUE)
   (update_store_category_desc
      {st_blurb.lbl
         set_text
         {sprint
            {$this get category}
            _shop_desc}}
      {st_poster.pic
         set_tex_file
         {sprint
            "shop_"
            {$this get category}
            "_poster.png"}}
      {st_costrange.lbl
         set_localized_text
         {sprintf
            {localize category_cost}
            {store
               low_cost
               {$this get category}}
            {store
               high_cost
               {$this get category}}}}
      {st_cat_name.lbl
         set_text
         {sprint
            "store_"
            {$this get category}}})
   (update_total_cash_display
      {st_cash.lbl
         set_localized_text
         {sprintf
            {localize store_cash_format}
            {campaign cash}}})
   (update_helpbar
      {do
         ($array)
         {set
            $array
            ()}
         {resize $array 0}
         {if_else
            {st_screen1.view showing}
            {push_back
               $array
               (fret1 help_select)}
            {if
               {!
                  {campaign
                     is_unlocked
                     {$this get_item_name}}}
               {push_back
                  $array
                  (fret1 help_buyitem)}}}
         {push_back
            $array
            (fret2 help_back)}
         {push_back
            $array
            (strum help_updown)}
         {helpbar set_display $array}})
   (enter
      {$this set_store_mode TRUE}
      {$this show_store_screen_1}
      {$this update_total_cash_display}
      {set $store_item_provider NULL}
      {$this hide_models}
      {cash.view set_showing FALSE}
      {{ui panel char_store}
         show_char
         0
         {character_provider get_symbol 0}})
   (TRANSITION_COMPLETE_MSG
      {cash.view set_showing TRUE})
   (exit
      {$this set_store_mode FALSE}
      {cash.view set_showing FALSE})
   (poll
      {do
         (($show_item
               {==
                  {ui screen store}
                  {ui current_screen}}))
         {if
            {st_screen2.view showing}
            {st_loading.lbl
               set_showing
               {&&
                  {==
                     {$this get category}
                     character}
                  {!
                     {{ui panel char_store}
                        are_chars_loaded}}}}
            {do
               (($item_sold
                     {&&
                        $show_item
                        {campaign
                           is_unlocked
                           {$this get_item_name}}}))
               {st_sold.mesh set_showing $item_sold}
               {if
                  {==
                     {$this get category}
                     character}
                  {{ui panel char_store}
                     char_store_lights_on
                     $item_sold}}}}
         {if
            $show_item
            {$this update_helpbar}}})
   (SELECT_MSG
      {switch
         $component
         (st_guitars.btn
            {set $store_item_provider store_guitar_provider}
            {$this show_store_screen_2}
            {$this update_store_item_desc}
            {$this update_store_item_display}
            {store_guitar_display hide FALSE})
         (st_skins.btn
            {set $store_item_provider store_skin_provider}
            {$this show_store_screen_2}
            {$this update_store_item_desc}
            {$this update_store_item_display}
            {store_guitar_display hide FALSE})
         (st_songs.btn
            {set $store_item_provider song_provider}
            {$this show_store_screen_2}
            {$this update_store_item_desc}
            {$this update_store_item_display}
            {store_cd.view set_showing TRUE}
            {{ui panel store_cd}
               clear_tasks}
            {animate_forever_30fps
               {ui panel store_cd}
               store_cd.view}
            {meta_music_stop})
         (st_characters.btn
            {set $store_item_provider character_provider}
            {$this show_store_screen_2}
            {$this update_store_item_desc}
            {$this update_store_item_display}
            {{ui panel char_store}
               hide
               FALSE})
         (st_videos.btn
            {set
               $store_item_provider
               {game video_provider}}
            {$this show_store_screen_2}
            {$this update_store_item_desc}
            {store_video.view set_showing TRUE}
            {{ui panel store_video}
               clear_tasks}
            {animate_forever_30fps
               {ui panel store_video}
               store_video.view})}
      kDataUnhandled)
   (FOCUS_MSG
      {do
         ($new_cat)
         {set
            $new_cat
            {switch
               $new_focus
               (st_guitars.btn guitar)
               (st_skins.btn skin)
               (st_songs.btn song)
               (st_characters.btn character)
               (st_videos.btn video)}}
         {if
            {!= $new_cat kDataUnhandled}
            {$this set category $new_cat}
            {$this update_store_category_desc}}}
      kDataUnhandled)
   (hide_models
      {song_preview ''}
      {meta_music_start}
      {{ui panel char_store}
         hide
         TRUE}
      {store_guitar_display hide TRUE}
      {store_cd.view set_showing FALSE}
      {store_video.view set_showing FALSE})}
{new_gh_screen
   store
   (panels meta store_back store_guitar_display store_cd store_video char_store store helpbar)
   (focus store)
   (BUTTON_DOWN_MSG
      {cond
         ({&&
               {'||'
                  {== $button kPad_DUp}
                  {== $button kPad_DDown}}
               {st_screen2.view showing}}
            {do
               ($increment
                  ($index
                     {store get itemIdx}))
               {if_else
                  {== $button kPad_DDown}
                  {set $increment 1}
                  {set $increment -1}}
               {set
                  $index
                  {'+'
                     $increment
                     {store get itemIdx}}}
               {store
                  set
                  itemIdx
                  {mod
                     $index
                     {$store_item_provider list_length}}}
               {store update_store_item_desc}
               {store update_store_item_display}}
            {synth play_sequence button_toggle}
            TRUE)
         ({meta is_back_button $button $player_num}
            {synth play_sequence button_back}
            {if_else
               {st_screen1.view showing}
               {do
                  {{ui screen store}
                     backwards_anim}
                  {autosave_goto career}}
               {do
                  {store hide_models}
                  {store show_store_screen_1}}}
            kDataUnhandled)
         ({&&
               {meta is_select_button $button $player_num}
               {st_screen2.view showing}}
            {if_else
               {&&
                  {!
                     {campaign
                        is_unlocked
                        {store get_item_name}}}
                  {>=
                     {campaign cash}
                     {store get_item_price}}}
               {do
                  {campaign
                     buy_item
                     {store get_item_name}
                     {store get_item_price}}
                  {store update_total_cash_display}
                  {ui push_screen store_bought}
                  {play_sfx cash_register}}
               {play_sfx button_error}}
            TRUE)
         (TRUE kDataUnhandled)})}
{new_panel store_bought}
{new_gh_screen
   store_bought
   (panels store_bought)
   (focus store_bought)
   (allow_back FALSE)
   (animate_transition FALSE)
   (helpbar
      (default
         ((fret1 help_continue))))
   (BUTTON_DOWN_MSG
      {if
         {meta is_select_button $button $player_num}
         {synth play_sequence button_select}
         {ui pop_screen}})
   (enter
      {store_bought.lbl
         set_text
         {sprintf
            "%s_bought_blurb"
            {store get category}}}
      {store hide_models})
   (exit
      {store show_store_screen_1})}
{new_gh_panel
   sel_venue
   (focus sv_basement.btn)
   (navigator
      (wrap FALSE)
      (vertical sv_arena.btn sv_fest.btn sv_theatre.btn sv_big_club.btn sv_small_club.btn sv_basement.btn))}
{new_gh_screen
   sel_venue
   (panels meta sel_venue helpbar)
   (focus sel_venue)
   (allow_back FALSE)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (venue_button
      ($venue)
      {sprintf
         "sv_%s.btn"
         $venue})
   (enter
      {campaign
         foreach_venue
         $venue
         {do
            (($button
                  {$this venue_button $venue})
               ($unlocked
                  {campaign is_unlocked $venue}))
            {if
               {game is_venue_available $venue}
               {if_else
                  $unlocked
                  {$this enable_component $button}
                  {$this disable_component $button}}}}}
      {if
         {==
            0
            {song_provider get_quickplay}}
         {game set_career_venue}}
      {do
         (($index
               {game get_venue_index})
            ($venue
               {game get_venue}))
         {sv_map.view
            set_frame
            {'+' $index 1}}
         {$this
            set_focus
            {$this venue_button $venue}}}
      {set $scrolldir 0})
   (set_venue_map_frame
      ($frame)
      {$this
         anim_task
         sv_map.view
         VENUE_MAP_SCROLL_MS
         {sv_map.view frame}
         $frame})
   (FOCUS_MSG
      {if
         {!
            {ui in_transition}}
         {switch
            $new_focus
            (sv_basement.btn
               {$this set_venue_map_frame 1}
               {game set_venue basement})
            (sv_small_club.btn
               {$this set_venue_map_frame 2}
               {game set_venue small_club})
            (sv_big_club.btn
               {$this set_venue_map_frame 3}
               {game set_venue big_club})
            (sv_theatre.btn
               {$this set_venue_map_frame 4}
               {game set_venue theatre})
            (sv_fest.btn
               {$this set_venue_map_frame 5}
               {game set_venue fest})
            (sv_arena.btn
               {$this set_venue_map_frame 6}
               {game set_venue arena})}})
   (SELECT_MSG
      {ui goto_screen sel_song}
      kDataUnhandled)
   (BUTTON_DOWN_MSG
      {cond
         ({meta is_back_button $button $player_num}
            {$this backwards_anim}
            {synth play_sequence button_back}
            {ui goto_screen career})
         ({== $button kPad_DUp}
            {set $scrolldir 1})
         ({== $button kPad_DDown}
            {set $scrolldir -1})}
      kDataUnhandled)}
{new_gh_panel
   sel_song
   (focus ss_song.lst)
   (joypad
      (hold_ms 500)
      (repeat_ms 80))
   (enter
      {turn_off_ambient}
      {$this set exiting_sel_song FALSE}
      {$this set metamusic_on_exit TRUE}
      {if
         {!
            {{ui current_screen}
               sel_song_career}}
         {song_provider set_quickplay TRUE}}
      {ss_song.lst set_provider song_provider}
      {$this update_song_info})
   (update_song_info
      {if
         {==
            0
            {song_provider get_quickplay}}
         {game set_career_song}}
      {ss_song.lst
         set_selected_pos
         {game get_song_index}}
      {$this
         set
         old_list_pos
         {ss_song.lst selected_pos}}
      {meta_music_stop}
      {song_preview
         {game get_song}}
      {sel_song.view
         set_frame
         {$this get_scroll_frame}}
      {$this
         set
         old_scroll_pos
         {$this get_scroll_frame}})
   (exit
      {$this set exiting_sel_song TRUE}
      {song_preview ''}
      {if
         {$this get metamusic_on_exit}
         {meta_music_start}}
      {song_provider set_quickplay FALSE})
   (get_scroll_frame
      {ss_song.lst spaced_selected_pos})
   (poll
      {if
         {ss_song.lst scrolling}
         {do
            (($old_scroll_pos
                  {$this get old_scroll_pos})
               ($new_scroll_pos
                  {$this get_scroll_frame}))
            {sel_song.view
               set_frame
               {'+'
                  $old_scroll_pos
                  {'*'
                     {ss_song.lst scroll_percent}
                     {- $new_scroll_pos $old_scroll_pos}}}}}})
   (SCROLL_START_MSG
      {game
         set_song_index
         {ss_song.lst selected_pos}})
   (SCROLL_MSG
      {if
         $done
         {do
            (($new_scroll_pos
                  {$this get_scroll_frame}))
            {sel_song.view set_frame $new_scroll_pos}
            {$this set old_scroll_pos $new_scroll_pos}
            {$this
               set
               old_list_pos
               {ss_song.lst selected_pos}}}}
      kDataUnhandled)
   (BUTTON_DOWN_MSG
      {if
         {is_updown_button $button}
         {if
            {!=
               {$this get old_list_pos}
               {ss_song.lst selected_pos}}
            {$this
               set
               old_list_pos
               {ss_song.lst selected_pos}}
            {song_preview ''}}}
      kDataUnhandled)
   (BUTTON_UP_MSG
      {if
         {&&
            {!
               {$this get exiting_sel_song}}
            {is_updown_button $button}}
         {song_preview
            {game get_song}}}
      kDataUnhandled)
   (refresh
      {ss_song.lst refresh})
   (beat_song
      ($score)
      {if
         {$this is_up}
         {do
            (($index
                  {ss_song.lst selected_pos})
               ($song
                  {song_provider get_symbol $index}))
            {campaign cheat_beat_song $song $score}
            {$this refresh}}})
   (beat_song
      {if
         {$this is_up}
         {do
            (($index
                  {ss_song.lst selected_pos})
               ($song
                  {song_provider get_symbol $index}))
            {campaign beat_song $song}
            {$this refresh}}})}
{new_gh_screen
   sel_song
   (panels meta sel_song helpbar)
   (focus sel_song)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (sel_song_career TRUE)
   (BUTTON_DOWN_MSG
      {if
         {meta is_back_button $button $player_num}
         {$this backwards_anim}
         {synth play_sequence button_back}
         {ui goto_screen sel_venue}})
   (SELECT_MSG
      {{ui panel sel_song}
         set
         metamusic_on_exit
         FALSE}
      {game set_multiplayer FALSE}
      {ui goto_screen loading}
      kDataUnhandled)}