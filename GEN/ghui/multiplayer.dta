{new_multi_char_sel_panel
   multi_sel_character
   (char_navigator
      (vertical metal classic alterna hair_metal punk nu_metal hiphop grim))}
#define CHARACTERS
((metal classic alterna hair_metal punk nu_metal hiphop grim))
{new_charsys_panel
   char_multi
   (char_config multiplayer)
   (load_order metal classic alterna hair_metal punk nu_metal hiphop grim)
   (enter
      {$this hide TRUE}
      {$this
         show_char
         0
         {game get_character}}
      {do
         (($player2
               {game get_player_config 1}))
         {$this
            show_char
            1
            {$player2 get_character}}})}
{new_gh_screen
   multi_sel_character
   (panels meta multi_sel_character char_multi helpbar)
   (focus multi_sel_character)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (sel_char_highlight_off
      ($playerNum)
      {do
         (($idx 0)
            ($config
               {game get_player_config $playerNum}))
         {while
            {<
               $idx
               {size CHARACTERS}}
            {do
               (($char
                     {elem CHARACTERS $idx}))
               {{sprintf
                     "sc_char_%s_focus_p%d.view"
                     $char
                     {'+' $playerNum 1}}
                  set_showing
                  FALSE}}
            {'++' $idx}}})
   (scroll_char_sel
      ($playerNum)
      {do
         (($config
               {game get_player_config $playerNum}))
         {{sprintf
               "sc%d_char_nm.lbl"
               {'+' $playerNum 1}}
            set_text
            {$config get_character}}
         {{sprintf
               "sc_char_%s_focus_p%d.view"
               {$config get_character}
               {'+' $playerNum 1}}
            set_showing
            TRUE}
         {{ui panel char_multi}
            show_char
            $playerNum
            {$config get_character}}})
   (enter
      {animate_forever_30fps $this multi_sel_character.view}
      {set $player_zero_done FALSE}
      {set $player_one_done FALSE}
      {$this sel_char_highlight_off 0}
      {$this sel_char_highlight_off 1}
      {$this scroll_char_sel 0}
      {$this scroll_char_sel 1}
      {app set_compact_heap TRUE})
   (TRANSITION_COMPLETE_MSG
      {{ui panel char_multi}
         hide
         FALSE})
   (exit
      {app set_compact_heap FALSE}
      {{ui panel char_multi}
         hide
         TRUE})
   (poll
      {msc_loading1.lbl
         set_showing
         {!
            {{ui panel char_multi}
               is_char_loaded
               0}}}
      {msc_loading2.lbl
         set_showing
         {!
            {{ui panel char_multi}
               is_char_loaded
               1}}}
      {sc_ready_p1.mesh
         set_showing
         {$this is_player_done 0}}
      {sc_ready_p2.mesh
         set_showing
         {$this is_player_done 1}})
   (SCROLL_MSG
      {$this sel_char_highlight_off $player_num}
      {if_else
         {== $player_num 0}
         {$this scroll_char_sel 0}
         {$this scroll_char_sel 1}})
   (GH_SELECT_MSG
      {synth play_sequence button_select})
   (chars_selected
      {ui goto_screen multi_sel_guitar})
   (deselect_char
      {synth play_sequence button_back})}
{new_panel multi_sel_guitar}
{new_guitar_display_panel
   multi_guitar_display
   (rnd_file ghui/guitar_display.gh)
   (rnd_name guitar_display)
   (object_name multi_guitar_display)
   (force_exit TRUE)
   (config multiplayer)}
{new_guitar_select_panel
   multi_input_guitar
   (object_name multi_input_guitar)
   (rnd_name input_guitar)
   (rnd_file
      "")
   (multiplayer TRUE)}
#define MULTI_SKIN_ANIM_START
(0)
#define MULTI_SKIN_ANIM_END
(10)
#define MULTI_SKIN_ANIM_PERIOD
(250)
{new_gh_screen
   multi_sel_guitar
   (panels meta multi_sel_guitar multi_input_guitar multi_guitar_display helpbar char_multi)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (focus multi_input_guitar)
   (enter
      {$this set player0_done FALSE}
      {$this set player1_done FALSE}
      {msg_label0.lbl set_text msg_select_guitar}
      {msg_label1.lbl set_text msg_select_guitar}
      {multi_input_guitar set_skin_select 0 FALSE}
      {multi_input_guitar set_skin_select 1 FALSE}
      {multi_input_guitar set_quickplay 0 TRUE}
      {multi_input_guitar set_quickplay 1 TRUE}
      {$this update_display}
      {{$this skin_anim 0}
         set_frame
         MULTI_SKIN_ANIM_START}
      {{$this skin_anim 1}
         set_frame
         MULTI_SKIN_ANIM_START}
      {{ui panel char_multi}
         set_paused
         TRUE})
   (exit
      {{ui panel char_multi}
         set_paused
         FALSE})
   (poll
      {sg_ready_p1.mesh
         set_showing
         {$this get player0_done}}
      {sg_ready_p2.mesh
         set_showing
         {$this get player1_done}})
   (update_display
      {$this update_player_display 0}
      {$this update_player_display 1})
   (update_player_display
      ($player)
      {$this
         set_guitar_label
         $player
         {if_else
            {multi_input_guitar is_skin_select $player}
            {multi_input_guitar get_selected_skin $player}
            {multi_input_guitar get_selected_guitar $player}}}
      {multi_guitar_display
         show_guitar
         $player
         {multi_input_guitar get_selected_guitar $player}
         {multi_input_guitar get_selected_skin $player}})
   (set_guitar_label
      ($player $text)
      {if_else
         $player
         {sg2_guitar_nm.lbl set_text $text}
         {sg1_guitar_nm.lbl set_text $text}})
   (get_num_guitar_skins
      ($playerNum)
      {multi_input_guitar
         get_num_skins
         $playerNum
         {multi_input_guitar get_selected_guitar $player_num}})
   (SCROLL_MSG
      {$this update_player_display $player_num})
   (GH_SELECT_MSG
      {$this handle_select $player_num}
      {if
         {&&
            {$this get player0_done}
            {$this get player1_done}}
         {$this set_guitar 0}
         {$this set_guitar 1}
         {ui goto_screen multi_selsong}}
      kDataUnhandled)
   (set_guitar
      ($player_num)
      {do
         (($config
               {game get_player_config $player_num}))
         {$config
            set_guitar
            {multi_input_guitar get_selected_guitar $player_num}}
         {$config
            set_guitar_skin
            {multi_input_guitar get_selected_skin $player_num}}})
   (handle_select
      ($player)
      {if_else
         {multi_input_guitar is_skin_select $player}
         {if
            {!
               {$this is_done $player}}
            {synth play_sequence button_select}
            {$this set_done $player TRUE}
            {$this update_player_display $player}}
         {do
            {synth play_sequence button_select}
            {multi_input_guitar set_skin_select $player TRUE}
            {if_else
               {==
                  {$this get_num_guitar_skins $player}
                  1}
               {$this set_done $player TRUE}
               {do
                  {{sprint
                        "msg_label"
                        $player
                        ".lbl"}
                     set_text
                     msg_select_skin}
                  {$this play_skin_anim $player MULTI_SKIN_ANIM_START MULTI_SKIN_ANIM_END}}}
            {$this update_player_display $player}}}
      TRUE)
   (is_done
      ($player)
      {if_else
         $player
         {$this get player1_done}
         {$this get player0_done}})
   (set_done
      ($player $status)
      {if_else
         $player
         {$this set player1_done $status}
         {$this set player0_done $status}})
   (BUTTON_DOWN_MSG
      {if_else
         {&&
            {meta is_back_button $button $player_num}
            {multi_input_guitar is_skin_select $player_num}}
         {do
            {synth play_sequence button_back}
            {{sprint
                  "ui::msg_label"
                  $player_num
                  ".lbl"}
               set_text
               msg_select_guitar}
            {multi_input_guitar set_skin_select $player_num FALSE}
            {$this set_done $player_num FALSE}
            {$this update_player_display $player_num}
            {if
               {>
                  {$this get_num_guitar_skins $player_num}
                  1}
               {$this play_skin_anim $player_num MULTI_SKIN_ANIM_END MULTI_SKIN_ANIM_START}}
            'TRUE;'}
         {if_else
            {$this is_done $player_num}
            'TRUE;'
            kDataUnhandled}})
   (play_skin_anim
      ($player $start $end)
      {$this set_animating $player TRUE}
      {$this
         anim_task
         {$this skin_anim $player}
         MULTI_SKIN_ANIM_PERIOD
         $start
         $end}
      {$this
         delay_task
         MULTI_SKIN_ANIM_PERIOD
         (preserve $this $player)
         {$this set_animating $player FALSE}})
   (skin_anim
      ($player)
      {sprint
         "guitar_transition_p"
         $player
         ".tnm"})}
{new_gh_screen
   multi_seldiff
   (panels meta sel_difficulty helpbar)
   (focus sel_difficulty)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (SELECT_MSG
      {meta setup_multiplayer}
      {ui goto_screen loading}
      kDataUnhandled)}
{new_gh_screen
   multi_selsong
   (panels meta sel_song helpbar)
   (focus sel_song)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (sel_song_career FALSE)
   (SELECT_MSG
      {ui goto_screen multi_seldiff}
      kDataUnhandled)
   (BUTTON_DOWN_MSG
      {if
         {meta is_back_button $button $player_num}
         {synth play_sequence button_back}
         {$this backwards_anim}
         {ui goto_screen multi_sel_guitar}}
      kDataUnhandled)}
{new_gh_panel
   multi_compete
   (clear_vram TRUE)
   (enter
      {crowd_audio turn_off}
      {$this
         delay_task
         300
         {play_sfx postshow_loop}}
      {do
         (($player0 'player0::player')
            ($player1 'player1::player')
            $winner)
         {cond
            ({>
                  {$player0 score}
                  {$player1 score}}
               {set $winner 0})
            ({<
                  {$player0 score}
                  {$player1 score}}
               {set $winner 1})
            ({==
                  {$player0 score}
                  {$player1 score}}
               {set $winner -1})}
         {winner_photo0.mesh
            set_showing
            {== 0 $winner}}
         {winner_photo1.mesh
            set_showing
            {== 1 $winner}}
         {me_winner.lbl
            set_text
            {cond
               ({== $winner 0}
                  PLAYER_1_WINS)
               ({== $winner 1}
                  PLAYER_2_WINS)
               (TRUE DRAW)}}
         {me_song_data.lbl
            set_localized_text
            {game get_song_text}}
         {me_artist_data.lbl
            set_localized_text
            {game get_song_artist_text}}
         {me_diff_data.lbl
            set_text
            {game get_difficulty_sym}}
         {me_score_data1.lbl
            set_localized_text
            {sprint
               {$player0 score}}}
         {me_percent_data1.lbl
            set_localized_text
            {sprintf
               {localize me_percent_format}
               {$player0 percent_hit}}}
         {me_streak_data1.lbl
            set_localized_text
            {sprint
               {$player0 longest_streak}}}
         {me_stars1.lbl
            set_text
            {$player0 star_rating}}
         {me_score_data2.lbl
            set_localized_text
            {sprint
               {$player1 score}}}
         {me_percent_data2.lbl
            set_localized_text
            {sprintf
               {localize me_percent_format}
               {$player1 percent_hit}}}
         {me_streak_data2.lbl
            set_localized_text
            {sprint
               {$player1 longest_streak}}}
         {me_stars2.lbl
            set_text
            {$player1 star_rating}}})
   (BUTTON_DOWN_MSG
      {if
         {meta is_select_button $button $player_num}
         {synth play_sequence button_select}
         {ui goto_screen complete}}
      kDataUnhandled)}
{new_gh_screen
   multi_compete
   (panels GAME_PANELS multi_compete helpbar)
   (focus multi_compete)
   (allow_back FALSE)
   (animate_transition FALSE)
   (helpbar
      (default
         ((fret1 help_continue))))
   (enter
      {game set_paused TRUE})}