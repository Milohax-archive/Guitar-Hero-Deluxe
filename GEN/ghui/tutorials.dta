#define WAIT_FOR_VO
({$task
      wait
      {tutorial is_vo_playing}})
#define LONG_VO_GAP
({sleep_seconds $task 0.6})
#define SHORT_VO_GAP
({sleep_seconds $task 0.5})
{func
   sleep_seconds
   ($taskmgr $duration_in_secs)
   {$taskmgr
      sleep
      {'*' $duration_in_secs 1000}}}
{func
   set_beatmatch_muting
   ($mute)
   {if_else
      $mute
      {'player0::player_matcher' set_volume 0}
      {'player0::player_matcher' set_volume 1}}}
#define WAIT_FOR_SONG_LOAD
({$task
      wait
      {!
         {game loaded}}}
   {game start_song})
#define END_OF_SONG_PERCENT
(97)
{with_namespace
   main
   {func
      update_tut_score
      ($label $score $total)
      {'ui::tut_score.lbl'
         set_localized_text
         {sprintf
            {localize tut_notes_fmt}
            $label
            $score
            $total}}}}
#define CORNER_WIDTH
(16)
#define PIECE_WIDTH
(16)
#define FILLER_WIDTH
(16)
#define HEIGHT_SHIFT
(25)
{func
   size_left_box
   ($width $height)
   {tut_box_ul.mesh
      set_local_pos
      {-
         {/ CORNER_WIDTH 2}
         {/ $width 2}}
      0
      {-
         {/ $height 2}
         {/ CORNER_WIDTH 2}}}
   {tut_box_ur.mesh
      set_local_pos
      {-
         {/ $width 2}
         {/ CORNER_WIDTH 2}}
      0
      {-
         {/ $height 2}
         {/ CORNER_WIDTH 2}}}
   {tut_box_rp.mesh
      set_local_pos
      {-
         {/ $width 2}
         {/ CORNER_WIDTH 2}}
      0
      0}
   {tut_box_rp.mesh
      set_local_scale
      1
      1
      {/
         {-
            $height
            {'*' 2 CORNER_WIDTH}}
         PIECE_WIDTH}}
   {tut_box_bl.mesh
      set_local_pos
      {-
         {/ CORNER_WIDTH 2}
         {/ $width 2}}
      0
      {-
         {/ CORNER_WIDTH 2}
         {/ $height 2}}}
   {tut_box_lp.mesh
      set_local_pos
      {-
         {/ CORNER_WIDTH 2}
         {/ $width 2}}
      0
      0}
   {tut_box_lp.mesh
      set_local_scale
      1
      1
      {/
         {-
            $height
            {'*' 2 CORNER_WIDTH}}
         PIECE_WIDTH}}
   {tut_box_br.mesh
      set_local_pos
      {-
         {/ $width 2}
         {/ CORNER_WIDTH 2}}
      0
      {-
         {/ CORNER_WIDTH 2}
         {/ $height 2}}}
   {tut_box_mp.mesh
      set_local_scale
      {/
         {-
            $width
            {'*' 2 CORNER_WIDTH}}
         FILLER_WIDTH}
      1
      {/ $height FILLER_WIDTH}}
   {tut_box_left.view
      set_local_pos
      {-
         {/ $width 2}
         308}
      0
      {-
         227
         {/ $height 2}}}}
{func
   size_right_box
   ($width $height $score)
   {if_else
      $score
      {set $height_shift HEIGHT_SHIFT}
      {set $height_shift 0}}
   {tut_box_ul1.mesh
      set_local_pos
      {-
         {/ CORNER_WIDTH 2}
         {/ $width 2}}
      0
      {-
         {/
            {'+' $height $height_shift}
            2}
         {/ CORNER_WIDTH 2}}}
   {tut_box_ur1.mesh
      set_local_pos
      {-
         {/ $width 2}
         {/ CORNER_WIDTH 2}}
      0
      {-
         {/
            {'+' $height $height_shift}
            2}
         {/ CORNER_WIDTH 2}}}
   {tut_box_rp1.mesh
      set_local_pos
      {-
         {/ $width 2}
         {/ CORNER_WIDTH 2}}
      0
      0}
   {tut_box_rp1.mesh
      set_local_scale
      1
      1
      {/
         {-
            {'+' $height $height_shift}
            {'*' 2 CORNER_WIDTH}}
         PIECE_WIDTH}}
   {tut_box_bl1.mesh
      set_local_pos
      {-
         {/ CORNER_WIDTH 2}
         {/ $width 2}}
      0
      {-
         {/ CORNER_WIDTH 2}
         {/
            {'+' $height $height_shift}
            2}}}
   {tut_box_lp1.mesh
      set_local_pos
      {-
         {/ CORNER_WIDTH 2}
         {/ $width 2}}
      0
      0}
   {tut_box_lp1.mesh
      set_local_scale
      1
      1
      {/
         {-
            {'+' $height $height_shift}
            {'*' 2 CORNER_WIDTH}}
         PIECE_WIDTH}}
   {tut_box_br1.mesh
      set_local_pos
      {-
         {/ $width 2}
         {/ CORNER_WIDTH 2}}
      0
      {-
         {/ CORNER_WIDTH 2}
         {/
            {'+' $height $height_shift}
            2}}}
   {tut_box_mp1.mesh
      set_local_scale
      {/
         {-
            $width
            {'*' 2 CORNER_WIDTH}}
         FILLER_WIDTH}
      1
      {/
         {'+' $height $height_shift}
         FILLER_WIDTH}}
   {tut_box_right.view
      set_local_pos
      {-
         307
         {/ $width 2}}
      0
      {-
         226
         {/
            {'+' $height $height_shift}
            2}}}
   {tut_score.lbl
      set_local_pos
      {-
         307
         {/ $width 2}}
      0
      {- 220 $height}}}
#define SONG_DELAY_SEC
(3.2)
#define TUT1_1_BOX
(270 147)
#define TUT1_1_TASK
(264 86 FALSE)
#define TUT1_2_BOX
(270 87)
#define TUT1_2_TASK
(264 65 TRUE)
#define TUT1_3_BOX
(270 87)
#define TUT1_3_TASK
(264 87 TRUE)
#define TUT1_4_BOX
(270 147)
#define TUT1_4_TASK
(264 86 TRUE)
#define TUT1_5_BOX
(270 87)
#define TUT1_5_TASK
(264 66 TRUE)
#define TUT1_6_BOX
(293 147)
#define TUT2_2_BOX
(270 107)
#define TUT2_2_TASK
(264 86 FALSE)
#define TUT2_3_BOX
(270 127)
#define TUT2_3_TASK
(264 127 FALSE)
#define TUT2_4_BOX
(305 167)
#define TUT2_4_TASK
(264 107 TRUE)
#define TUT2_5_BOX
(330 187)
#define TUT3_1_BOX
(330 107)
#define TUT3_1_TASK
(264 86 TRUE)
#define TUT3_2_BOX
(285 38)
#define TUT3_2_TASK
(264 87 TRUE)
#define TUT3_3_BOX
(285 38)
#define TUT3_3_TASK
(264 87 TRUE)
{new_tutorial_panel
   tut
   (object_name tutorial)
   (rnd_file
      "")
   (start_tutorial
      {$this
         set_state
         {{ui panel tutorials}
            get
            start_state}})
   (enter
      #define TUTORIAL_STATES
      ((intro playing_notes diff_notes held_notes chords interface wrapup star_intro star_combos whammy wail freestyle sustain pulloff)))
   (exit
      {$this clear_tasks})
   (set_state
      ($state)
      {$this set state $state}
      {switch
         $state
         (intro
            {$this
               thread_task
               (preserve $this)
               #include tutorial_11_tuning.dta})
         (playing_notes
            {$this
               thread_task
               (preserve $this)
               #include tutorial_12_playing_notes.dta})
         (diff_notes
            {$this
               thread_task
               (preserve $this)
               #include tutorial_13_diff_notes.dta})
         (held_notes
            {$this
               thread_task
               (preserve $this)
               #include tutorial_14_held_notes.dta})
         (chords
            {$this
               thread_task
               (preserve $this)
               #include tutorial_15_chords.dta})
         (interface
            {$this
               thread_task
               (preserve $this)
               #include tutorial_16_interface.dta})
         (wrapup
            {$this
               thread_task
               (preserve $this)
               #include tutorial_19_wrapup.dta})
         (star_intro
            {$this
               thread_task
               (preserve $this)
               #include tutorial_21_star_intro.dta})
         (star_combos
            {$this
               thread_task
               (preserve $this)
               #include tutorial_22_star_combos.dta})
         (whammy
            {$this
               thread_task
               (preserve $this)
               #include tutorial_23_whammy.dta})
         (wail
            {$this
               thread_task
               (preserve $this)
               #include tutorial_24_wail.dta})
         (freestyle
            {$this
               thread_task
               (preserve $this)
               #include tutorial_31_freestyle.dta})
         (sustain
            {$this
               thread_task
               (preserve $this)
               #include tutorial_32_sustain.dta})
         (pulloff
            {$this
               thread_task
               (preserve $this)
               #include tutorial_33_pulloff.dta})})
   (get_next_state
      ($inc)
      {do
         ($old $new)
         {find_elem
            TUTORIAL_STATES
            {$this get state}
            $old}
         {set
            $new
            {mod
               {'+' $old $inc}
               {size TUTORIAL_STATES}}}
         {elem TUTORIAL_STATES $new}})
   (switch_to_state
      ($state)
      {$this set_state $state}
      {$task exit})
   (tutorial_inc
      ($num)
      {do
         (($next
               {$this get_next_state $num}))
         {$this clear_tasks}
         {$this reset_vo}
         {$this set_state $next}})}
{new_panel
   tutorials
   (navigator
      (vertical tut_1.btn tut_2.btn tut_3.btn))
   (enter
      {$this set_focus tut_1.btn}
      {do
         (($done
               {campaign tutorials_done}))
         {tut_2.btn
            set_state
            {if_else
               {>= $done 1}
               kNormal
               kDisabled}}
         {tut_3.btn
            set_state
            {if_else
               {>= $done 2}
               kNormal
               kDisabled}}})
   (FOCUS_MSG
      {switch
         $new_focus
         (tut_1.btn
            {tut_blurb.lbl set_text TUT_1_BLURB})
         (tut_2.btn
            {tut_blurb.lbl set_text TUT_2_BLURB})
         (tut_3.btn
            {tut_blurb.lbl set_text TUT_3_BLURB})})
   (SELECT_MSG
      {switch
         $component
         (tut_1.btn
            {$this set start_state intro}
            {$this set tut_song tutorial102}
            {campaign do_tutorial 1})
         (tut_2.btn
            {$this set start_state star_intro}
            {$this set tut_song tutorial202}
            {campaign do_tutorial 2})
         (tut_3.btn
            {$this set start_state freestyle}
            {$this set tut_song tutorial205}
            {campaign do_tutorial 3})}
      {ui goto_screen tut_loading}
      kDataUnhandled)}
{new_gh_screen
   tutorials
   (panels tutorials meta helpbar)
   (focus tutorials)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (SELECT_MSG
      {game set_multiplayer FALSE}
      {tutorial set_tutorial_running TRUE}
      kDataUnhandled)}
{new_gh_screen
   tut_loading
   (panels loading)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {reset_ambient}
      {{game get_bank_loader}
         reset}
      {arena_panel set_load_banks FALSE}
      {game set_character nu_metal}
      {game set_guitar gibson_flying_v}
      {game set_venue basement}
      {game
         set_song
         {{ui panel tutorials}
            get
            tut_song}}
      {game set_difficulty kDifficultyEasy}
      {ui goto_screen tut_script})}
{new_panel
   tut_script
   (rnd_file
      {if_else
         {options get_lefty 0}
         ghui/tut_script_lefty.gh
         ghui/tut_script.gh})
   (enter
      {game set_skip_intro TRUE}
      {game set_start_paused TRUE}
      {game set_time_paused TRUE}
      {tutorial start_tutorial})
   (exit
      {game set_skip_intro FALSE}
      {game set_start_paused FALSE}
      {reset_all_callbacks})}
{new_gh_screen
   tut_script
   (panels GAME_PANELS tut tut_script)
   (focus tut_script)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {{ui panel tut}
         set_paused
         FALSE})
   (BUTTON_DOWN_MSG
      {if
         {&&
            {== $player_num 0}
            {== $button kPad_Start}}
         {{ui panel tut}
            set_paused
            TRUE}
         {ui goto_screen tut_pause}})
   (poll
      {if
         {&&
            {tutorial is_missing_guitar}
            {!
               {campaign tutorial_access}}}
         {{ui panel tut}
            set_paused
            TRUE}
         {ui goto_screen tut_pause_controller}})}
{new_gh_panel
   tut_pause
   (clear_vram TRUE)
   (player_num 0)
   (navigator
      (vertical tut_pause_resume.btn tut_pause_restart.btn tut_pause_quit.btn))
   (enter
      {$this set_focus tut_pause_resume.btn})}
#define TUT_PAUSE_SCREEN_HANDLERS
((allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {$this
         set
         game_paused
         {game time_paused}}
      {game set_time_paused TRUE}
      {{ui panel tut_script}
         set_paused
         TRUE}
      {synth pause_all_sfx TRUE}
      {hud set_paused TRUE}
      {app set_paused TRUE})
   (exit
      {{ui panel tut_script}
         set_paused
         FALSE}
      {hud set_paused FALSE}
      {app set_paused FALSE})
   (resume
      {synth pause_all_sfx FALSE}
      {game
         set_time_paused
         {$this get game_paused}}
      {ui goto_screen tut_script}))
{new_gh_screen
   tut_pause
   (panels GAME_PANELS tut tut_script tut_pause)
   (focus tut_pause)
   TUT_PAUSE_SCREEN_HANDLERS
   (SELECT_MSG
      {switch
         $component
         (tut_pause_resume.btn
            {$this resume})
         (tut_pause_restart.btn
            {stop_sfx bkgd_music}
            {ui goto_screen tut_loading})
         (tut_pause_quit.btn
            {ui goto_screen tutorial_quit})})
   (BUTTON_DOWN_MSG
      {if
         {&&
            {== $player_num 0}
            {== $button kPad_Start}}
         {$this resume}})}
{new_gh_panel
   tut_pause_controller
   (clear_vram TRUE)
   (player_num 0)
   (navigator
      (vertical pause_controller_resume.btn pause_controller_exit.btn))
   (focus pause_controller_resume.btn)
   (enter
      {pause_controller_msg.lbl set_text tut_guitar_loss_msg})
   (poll
      {if_else
         {tutorial is_missing_guitar}
         {$this disable_component pause_controller_resume.btn}
         {$this enable_component pause_controller_resume.btn}})}
{new_gh_screen
   tut_pause_controller
   (panels GAME_PANELS tut tut_script tut_pause_controller)
   (focus tut_pause_controller)
   TUT_PAUSE_SCREEN_HANDLERS
   (SELECT_MSG
      {switch
         $component
         (pause_controller_resume.btn
            {$this resume})
         (pause_controller_exit.btn
            {ui goto_screen tutorial_quit})})}
{new_gh_screen
   tutorial_quit
   (panels tut tut_script)
   (focus tut_script)
   (allow_back FALSE)
   (animate_transition FALSE)
   (enter
      {stop_sfx bkgd_music}
      {synth stop_all_sfx}
      {tut_script.view set_showing FALSE}
      {meta_loading_goto main})}